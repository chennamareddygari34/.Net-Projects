using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.IdentityModel.Tokens;
using Serilog;

namespace BankingWebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private const string SecretKey = "your_secret_key_here";
        private readonly SymmetricSecurityKey _securityKey = new(Encoding.UTF8.GetBytes(SecretKey));

        [HttpPost("login")]
        [ServiceFilter(typeof(RequestLoggingFilter))]
        [ServiceFilter(typeof(ExceptionFilter))]
        [ServiceFilter(typeof(ResponseLoggingFilter))]
        [ServiceFilter(typeof(BankingResultFilter))]
        public IActionResult Login(string username, string password)
        {
            if (username == "admin" && password == "password")
            {
                var token = GenerateToken(username);
                return Ok(new { token });
            }
            else
            {
                return Unauthorized("Invalid credentials");
            }
        }

        private string GenerateToken(string username)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var claims = new ClaimsIdentity(new[]
            {
                new Claim(ClaimTypes.Name, username)
            });

            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = claims,
                Expires = DateTime.UtcNow.AddDays(7),
                SigningCredentials = new SigningCredentials(_securityKey, SecurityAlgorithms.HmacSha256Signature)
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }
    }

    public class RequestLoggingFilter : IActionFilter
    {
        public void OnActionExecuting(ActionExecutingContext context)
        {
            Log.Information($"Request: {context.HttpContext.Request.Path} {context.HttpContext.Request.Method}");
        }

        public void OnActionExecuted(ActionExecutedContext context)
        {
            // No action needed after execution
        }
    }

    public class ExceptionFilter : IExceptionFilter
    {
        public void OnException(ExceptionContext context)
        {
            Log.Error($"Exception: {context.Exception.Message}");
            context.Result = new StatusCodeResult(500);
        }
    }

    public class ResponseLoggingFilter : IActionFilter
    {
        public void OnActionExecuting(ActionExecutingContext context)
        {
            // No action needed before execution
        }

        public void OnActionExecuted(ActionExecutedContext context)
        {
            Log.Information($"Response: {context.HttpContext.Response.StatusCode}");
        }
    }

    public class BankingResultFilter : IResultFilter
    {
        public void OnResultExecuting(ResultExecutingContext context)
        {
            // No action needed before result execution
        }

        public void OnResultExecuted(ResultExecutedContext context)
        {
            // Log the result if needed
            Log.Information($"Result: {context.Result}");
        }
    }
}
---------------------------------------------------------------------------------------------
using BankingWebApi.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Mvc;

namespace BankingWebApi.Controllers
{
    [EnableCors("MyCors")]
    [Route("api/[controller]")]
    [ApiController]
    [TypeFilter(typeof(RequestLogFilter))]
    [TypeFilter(typeof(ResponseLogFilter))]
    [TypeFilter(typeof(ExceptionFilter))]
    [TypeFilter(typeof(BankingResultFilter))]
    public class AccountsController : ControllerBase
    {
        private readonly ILogger<AccountsController> _logger;

        public AccountsController(ILogger<AccountsController> logger)
        {
            _logger = logger;
        }

        [HttpGet("{id}")]
        [Authorize]
        public IActionResult GetAccountDetails(int id)
        {
            try
            {
                _logger.LogInformation($"Fetching account details for account ID {id}");
                return Ok(new { AccountId = id, Balance = 10000 });
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error occurred while fetching account details: {ex.Message}");
                return StatusCode(500, "Internal server error");
            }
        }
    }
}
    
-----------------------------------------------
using Microsoft.AspNetCore.Mvc;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.IdentityModel.Tokens;

namespace BankProject.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        private const string SecretKey = "your_secret_key_here";
        private readonly SymmetricSecurityKey _securityKey = new(Encoding.UTF8.GetBytes(SecretKey));

        [HttpPost("login")]
        public IActionResult Login(string username, string password)
        {
            if (username == "admin" && password == "password")
            {
                var token = GenerateToken(username);
                return Ok(new { token });
            }
            else
            {
                return Unauthorized("Invalid credentials");
            }
        }

        private string GenerateToken(string username)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var claims = new ClaimsIdentity(new[]
            {
                new Claim(ClaimTypes.Name, username)
            });

            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = claims,
                Expires = DateTime.UtcNow.AddDays(7),
                SigningCredentials = new SigningCredentials(_securityKey, SecurityAlgorithms.HmacSha256Signature)
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }
    }
}
--------------------------------------------------------------------
using System.Security.Claims;
using BankingWebApi.Services;

namespace BankingWebApi
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.

            builder.Services.AddControllers(options =>
            {
                options.Filters.Add(new AuthActionFilter());
                //options.Filters.Add(typeof(ExceptionFilter));
                
            });

            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
            builder.Services.AddEndpointsApiExplorer();

            builder.Services.AddAuthorization(options =>
            {
                options.AddPolicy("AdminPolicy", policy =>
                    policy.RequireClaim(ClaimTypes.Name, "admin"));
            });
            ////builder.Services.AddScoped<RequestLogFilter>();
            ////builder.Services.AddScoped<AuthActionFilter>();
            ////builder.Services.AddScoped<ExceptionFilter>();
            ////builder.Services.AddScoped<ResponseLogFilter>();
            ////builder.Services.AddScoped<BankingResultFilter>();


            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI();
            }
            app.UseRouting();
            app.UseCors("MyCors");

            app.UseAuthentication();
            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });



            app.Run();
        }
    }
}

----------------------------
using System.Text;
using System.Text.Json.Serialization;
using BankingWebApi.Contexts;
using BankingWebApi.Interfaces;
using BankingWebApi.Services;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Hosting;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;

namespace BankingWebApi
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.

            builder.Services.AddControllers();
            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen(option =>
            {
                option.SwaggerDoc("v1", new OpenApiInfo { Title = "Demo API", Version = "v1" });
                option.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    In = ParameterLocation.Header,
                    Description = "Please enter a valid token",
                    Name = "Authorization",
                    Type = SecuritySchemeType.Http,
                    BearerFormat = "JWT",
                    Scheme = "Bearer"
                });
                option.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type=ReferenceType.SecurityScheme,
                                Id="Bearer"
                            }
                        },
                        new string[]{}
                    }
                });
            });
            var configuration = new ConfigurationBuilder()
    .AddJsonFile("appsettings.json")
    .Build();

            var stringkey = configuration.GetValue<string>("Jwt:SecretKey") ?? throw new Exception("Jwt:SecretKey is missing in configuration");
            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(stringkey));


            builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                    .AddJwtBearer(opts =>
                    {
                        opts.TokenValidationParameters = new TokenValidationParameters
                        {
                            ValidateIssuer = false,
                            ValidateAudience = false,
                            ValidateLifetime = true,
                            ValidateIssuerSigningKey = true,
                            IssuerSigningKey = new SymmetricSecurityKey(key)
                        };
                    });
            builder.Services.AddCors(opts =>
            {
                opts.AddPolicy("MyCors", options =>
                {
                    options.AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin();
                });
            }); builder.Services.AddCors(opts =>
            {
                opts.AddPolicy("MyCors", options =>
                {
                    options.AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin();
                });
            });


            builder.Services.AddDbContext<BankContext>(opts =>
            {
                opts.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection"));
            });




            builder.Services.AddControllers().AddJsonOptions(options =>
            {
                options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.Preserve;
            });

            builder.Services.AddScoped<IAuthService, AuthService>();

            var app = builder.Build();
            AppContext.SetSwitch("Npgsql.EnableLegacyTimestampBehavior", true);

            // Configure the HTTP request pipeline.
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI();
            }
            app.UseCors("MyCors");
            app.UseAuthorization();


            app.MapControllers();

            app.Run();
        }
    }
}
----------------------------------------------------------------------------
using BankingFilterApp.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading.Tasks;

namespace BankingFilterApp.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class BankController : ControllerBase
    {
        private readonly List<BankAccount> _bankAccounts = new();
        private readonly ILogger<BankController> _logger;

        public BankController(ILogger<BankController> logger)
        {
            _logger = logger;
        }

        [HttpGet("accounts")]
        [ServiceFilter(typeof(RequestLogFilter))]
        [ServiceFilter(typeof(BankingResultFilter))]
        public IActionResult GetAccounts()
        {
            return Ok(_bankAccounts);
        }

        [HttpGet("accounts/{id}")]
        [ServiceFilter(typeof(RequestLogFilter))]
        [ServiceFilter(typeof(BankingResultFilter))]
        public IActionResult GetAccountById(int id)
        {
            var account = _bankAccounts.Find(a => a.Id == id);
            if (account == null)
            {
                return NotFound();
            }
            return Ok(account);
        }

        [HttpPost("accounts")]
        [ServiceFilter(typeof(RequestLogFilter))]
        [ServiceFilter(typeof(BankingResultFilter))]
        public IActionResult CreateAccount([FromBody] BankAccount account)
        {
            account.Id = _bankAccounts.Count + 1; // Assign a new ID
            _bankAccounts.Add(account);
            return CreatedAtAction(nameof(GetAccountById), new { id = account.Id }, account);
        }

        [HttpPut("accounts/{id}")]
        [ServiceFilter(typeof(RequestLogFilter))]
        [ServiceFilter(typeof(BankingResultFilter))]
        public IActionResult UpdateAccount(int id, [FromBody] BankAccount updatedAccount)
        {
            var existingAccount = _bankAccounts.Find(a => a.Id == id);
            if (existingAccount == null)
            {
                return NotFound();
            }
            existingAccount.Name = updatedAccount.Name;
            existingAccount.Balance = updatedAccount.Balance;
            return Ok(existingAccount);
        }

        [HttpDelete("accounts/{id}")]
        [ServiceFilter(typeof(RequestLogFilter))]
        [ServiceFilter(typeof(BankingResultFilter))]
        public IActionResult DeleteAccount(int id)
        {
            var account = _bankAccounts.Find(a => a.Id == id);
            if (account == null)
            {
                return NotFound();
            }
            _bankAccounts.Remove(account);
            return NoContent();
        }
    }

    public class RequestLogFilter : IAsyncActionFilter
    {
        private readonly ILogger<BankController> _logger;

        public RequestLogFilter(ILogger<BankController> logger)
        {
            _logger = logger;
        }

        public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
        {
            _logger.LogInformation("Request received at {DateTime}", DateTime.Now);
            await next();
        }
    }

    public class ResponseLogFilter : IAsyncActionFilter
    {
        private readonly ILogger<BankController> _logger;

        public ResponseLogFilter(ILogger<BankController> logger)
        {
            _logger = logger;
        }

        public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
        {
            var resultContext = await next();
            _logger.LogInformation("Response sent at {DateTime}", DateTime.Now);
        }
    }

    public class BankingResultFilter : IAsyncResultFilter
    {
        private readonly ILogger<BankController> _logger;

        public BankingResultFilter(ILogger<BankController> logger)
        {
            _logger = logger;
        }

        public async Task OnResultExecutionAsync(ResultExecutingContext context, ResultExecutionDelegate next)
        {
            _logger.LogInformation("Executing BankingResultFilter...");
            var resultContext = await next();
            _logger.LogInformation("BankingResultFilter executed.");
        }
    }
}
--------------------------------------------------------
{
  "userName": "Pavan",
  "password": "Pavank@506",
  "token": "string",
  "role": "Manager"
}
--------------------------------
    public void OnActionExecuting(ActionExecutingContext context)
{
    Console.WriteLine($"This Filter Executed on: OnActionExecuting");
}

public void OnActionExecuted(ActionExecutedContext context)
{
    Console.WriteLine($"This Filter Executed on: OnActionExecuted");
}

